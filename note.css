/* Well Introduction On CSS */
/* What is CSS?

CSS stands for Cascading Style Sheets.
It is a stylesheet language used to describe the look and layout of HTML documents — such as colors, fonts, spacing, positioning, and overall visual design of a web page.

HTML gives a page its structure, while CSS gives it style and presentation.

Example:

<!-- HTML -->
<h1>Hello, World!</h1>

<!-- CSS -->
<style>
  h1 {
    color: blue;
    text-align: center;
    font-family: Arial, sans-serif;
  }
</style>

🎨 Why Use CSS?

Separation of structure and design:
HTML handles the content; CSS handles the design.

Reusability:
One CSS file can style multiple web pages — improving consistency and maintainability.

Better performance:
CSS reduces code duplication and page loading time.

Responsiveness:
CSS allows you to create layouts that adapt to various screen sizes (mobile, tablet, desktop).

🧩 Ways to Add CSS

There are three main methods to apply CSS to HTML:

1. Inline CSS

Applied directly within an HTML element using the style attribute.

<p style="color: red; font-size: 18px;">This is inline CSS.</p>


✅ Quick for small changes
❌ Not reusable and clutters HTML

2. Internal CSS

Written inside a <style> tag within the <head> section of an HTML file.

<head>
  <style>
    body {
      background-color: #f4f4f4;
    }
    h1 {
      color: blue;
    }
  </style>
</head>


✅ Works well for single-page websites
❌ Not ideal for multi-page projects

3. External CSS

Written in a separate .css file and linked to the HTML file.

<!-- HTML -->
<link rel="stylesheet" href="style.css">

<!-- style.css -->
body {
  background-color: #fff;
  color: #333;
}


✅ Most efficient method for large websites
✅ Encourages clean code and reusability

🧱 CSS Syntax

Every CSS rule has two main parts:

selector {
  property: value;
}


Example:

p {
  color: green;
  font-size: 16px;
}


Selector: Targets the HTML element (p)

Property: Defines the aspect you want to style (color)

Value: The setting you apply (green)

🎯 CSS Selectors

Selectors define which HTML elements you want to style.

Selector Type	Example	Description
Element Selector	h1 {}	Targets all <h1> tags
Class Selector	.box {}	Targets elements with class="box"
ID Selector	#main {}	Targets element with id="main"
Universal Selector	* {}	Targets all elements
Group Selector	h1, h2, h3 {}	Targets multiple elements
Descendant Selector	div p {}	Targets <p> inside <div>
Pseudo-class	a:hover {}	Styles element when user interacts
⚙️ CSS Box Model

Every HTML element is treated as a rectangular box.
The box model consists of:

Content → The text or image inside the element

Padding → Space between content and border

Border → Line surrounding padding

Margin → Space outside the border

Example:

div {
  width: 200px;
  padding: 20px;
  border: 5px solid black;
  margin: 10px;
}

🧭 CSS Positioning and Layout

CSS provides several layout techniques:

Property	Description
display	Defines how an element is displayed (block, inline, flex, grid)
position	Specifies element positioning (static, relative, absolute, fixed, sticky)
float	Moves an element to the left or right
z-index	Controls stacking order of elements
💡 CSS Units
Absolute Units:

px (pixels), cm, mm, in

Relative Units:

%, em, rem, vh, vw

Example:

h1 {
  font-size: 2rem; /* relative to root font size 
  margin: 10px;
}

🌈 Colors and Backgrounds

CSS supports multiple color formats:

Named colors: red, blue, green

HEX: #ff0000

RGB: rgb(255, 0, 0)

RGBA: rgba(255, 0, 0, 0.5)

HSL: hsl(0, 100%, 50%)

Example:

body {
  background-color: #f4f4f4;
  color: rgb(50, 50, 50);
}

✨ CSS Typography

Control text appearance with:

p {
  font-family: 'Arial', sans-serif;
  font-size: 16px;
  font-weight: bold;
  line-height: 1.6;
  text-align: justify;
}

📱 Responsive Design (Media Queries)

Media queries help make websites responsive to screen size changes.

@media screen and (max-width: 768px) {
  body {
    background-color: lightblue;
  }
}

🧩 Advanced CSS Features
Feature	Description
Flexbox	Aligns and distributes space among items in a container
Grid	Two-dimensional layout system for complex designs
Transitions	Smoothly animate property changes
Animations	Define keyframes for moving or transforming elements
Variables	Reuse values with --variable-name syntax

Example (animation):

@keyframes slide {
  from { transform: translateX(0); }
  to { transform: translateX(100px); }
}

div {
  animation: slide 2s infinite alternate;
}

🧮 CSS Cascade and Specificity

When multiple CSS rules target the same element, the cascade determines which one wins.

The order of priority:

Inline styles (highest)

IDs

Classes

Elements

Browser default styles

Example:

p { color: blue; }      /* element */
p.special { color: red; } /* class */
#unique { color: green; } /* id 

🏁 Conclusion

CSS is the core technology behind all web design.
It allows developers to make web pages beautiful, consistent, and responsive.
Mastering CSS involves understanding selectors, box model, layout techniques, and responsive design. */

/* CSS SELECTORS */
/* What Are CSS Selectors?

CSS selectors are patterns used to target HTML elements you want to style.
They tell the browser “apply these styles to these elements.”

Each CSS rule starts with a selector, followed by declarations:

selector {
  property: value;
}


Example:

p {
  color: blue;
  font-size: 18px;
}


Here:

p → selector (targets all <p> tags)

color and font-size → CSS properties

blue and 18px → values

🧱 1. Basic Selectors

These are the most commonly used and fundamental selectors.

🔹 a. Universal Selector *

Selects all elements on the page.

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


👉 Often used to reset or normalize styling globally.

🔹 b. Type Selector (Element Selector)

Selects all instances of a specific HTML tag.

h1 {
  color: red;
}
p {
  font-size: 16px;
}


👉 Targets every <h1> or <p> element.

🔹 c. Class Selector .classname

Selects elements that have a specific class attribute.

<p class="highlight">This is highlighted text.</p>

.highlight {
  color: orange;
  background-color: yellow;
}


👉 Classes are reusable; many elements can share the same class.

🔹 d. ID Selector #idname

Selects a single element with a unique id attribute.

<p id="intro">Welcome to my page.</p>

#intro {
  font-weight: bold;
  color: blue;
}


👉 IDs should be unique within a page.

🔹 e. Group Selector (,)

Applies the same styles to multiple selectors.

h1, h2, h3 {
  color: darkred;
  font-family: Arial, sans-serif;
}


👉 Makes styling multiple elements efficient.

🧩 2. Combinator Selectors

Combinators define the relationship between elements in HTML structure.

🔹 a. Descendant Selector (A B)

Selects elements inside another element (nested).

<div>
  <p>This paragraph is inside div.</p>
</div>

div p {
  color: green;
}


👉 Styles only <p> inside <div>.

🔹 b. Child Selector (A > B)

Selects elements that are direct children of another element.

<div>
  <p>Direct child</p>
  <span><p>Nested child</p></span>
</div>

div > p {
  color: red;
}


👉 Only the first <p> is styled because it’s a direct child.

🔹 c. Adjacent Sibling Selector (A + B)

Selects the first element immediately after another.

<h2>Heading</h2>
<p>This paragraph is right after h2.</p>
<p>This one is not.</p>

h2 + p {
  color: blue;
}


👉 Only the first <p> after <h2> is styled.

🔹 d. General Sibling Selector (A ~ B)

Selects all siblings of an element that come after it.

<h2>Title</h2>
<p>First paragraph</p>
<p>Second paragraph</p>

h2 ~ p {
  color: green;
}


👉 Styles both <p> elements after <h2>.

🧭 3. Attribute Selectors

Attribute selectors target elements based on their attributes and values.

Selector	Description	Example
[attr]	Elements with the attribute	[title] { color: red; }
[attr="value"]	Attribute with exact value	input[type="text"]
[attr~="value"]	Attribute containing a word	[class~="highlight"]
`[attr	="value"]`	Attribute starting with value (hyphen separated)
[attr^="value"]	Attribute starts with value	a[href^="https"]
[attr$="value"]	Attribute ends with value	img[src$=".jpg"]
[attr*="value"]	Attribute contains substring	a[href*="login"]

Example:

a[href^="https"] {
  color: green;
}

img[src$=".png"] {
  border: 2px solid red;
}

💡 4. Pseudo-Classes

Pseudo-classes style elements in specific states or conditions.

🔹 a. User Interaction States
a:link    { color: blue; }   /* Unvisited link */
a:visited { color: purple; } /* Visited link */
a:hover   { color: red; }    /* Mouse hover */
a:active  { color: orange; } /* When clicked


👉 Often used for interactive elements.

🔹 b. Structural Pseudo-classes

Used to target elements based on position in the DOM.

p:first-child { color: green; }   /* First child of parent */
p:last-child  { color: blue; }    /* Last child */
p:nth-child(2){ color: orange; }  /* Second child */
li:nth-of-type(odd) { background: #eee; } /* Odd items */
li:nth-of-type(even) { background: #ccc; } /* Even items 

🔹 c. Negation and Targeting
:not(.active) { opacity: 0.5; }  Everything except .active 
:target { background: yellow; } /* Element targeted by a link 

🔹 d. UI States
input:focus {
  border-color: blue;
}
input:disabled {
  background: #ddd;
}
input:checked {
  accent-color: red;
}

🎨 5. Pseudo-Elements

Pseudo-elements style specific parts of an element.

Pseudo-element	Description
::before	Inserts content before an element
::after	Inserts content after an element
::first-line	Styles the first line of text
::first-letter	Styles the first letter
::selection	Styles text when selected

Example:

p::first-letter {
  font-size: 200%;
  color: red;
}

p::after {
  content: " ✨";
}

🧮 6. Combining Selectors

Selectors can be combined to make powerful rules.

div.highlight > p:first-child::first-letter {
  color: red;
  font-size: 24px;
}


👉 This targets:

A <div> with class .highlight

Its first <p> child

The first letter of that paragraph

🧠 7. CSS Selector Specificity

When multiple selectors target the same element, specificity decides which one wins.

Selector Type	Specificity Value
Inline styles	1000
ID selector (#)	100
Class, pseudo-class, attribute	10
Element or pseudo-element	1

Example:

p { color: blue; }        /* 1 */
p.special { color: red; } /* 10 */
#main p { color: green; } /* 100 


👉 Final color: green (highest specificity wins).

⚙️ 8. Advanced Selectors (CSS Level 4)

Modern CSS introduces powerful advanced selectors.

🔹 a. :is()

Simplifies grouping.

:is(h1, h2, h3) {
  color: darkblue;
}


Equivalent to:

h1, h2, h3 { color: darkblue; }

🔹 b. :where()

Similar to :is() but has no specificity.

:where(header, footer) p {
  font-size: 14px;
}

🔹 c. :has()

A parent selector — styles an element if it contains another element.

article:has(img) {
  border: 2px solid green;
}


👉 The <article> is styled only if it contains an <img>.

🔹 d. :nth-child(an + b of selector)

Targets more complex patterns.

li:nth-child(2n of .highlight) {
  background: yellow;
}

🧾 9. Selector Performance Tips

Avoid using overly complex selectors (e.g., div > ul li a span).

Prefer classes for maintainable, scalable code.

Use IDs sparingly (only for unique items).

Combine selectors logically to reduce redundancy. 

<!-- CSS CASCADE RULES -->
     /* What Is the CSS Cascade?

The CSS Cascade determines which CSS rule takes precedence when multiple rules target the same element.

In simpler terms:

The cascade is the decision-making process the browser uses to determine which styles are applied to an element when more than one style could apply.

🧠 Why It’s Called “Cascade”

The word cascade comes from the idea that styles “fall down” from multiple sources — browser defaults, external stylesheets, inline styles, etc. — and the browser must decide which one wins in the end.

⚙️ The Cascade Decision Process

When multiple rules conflict, the browser resolves it using three main factors (in order):

Importance (Origin and !important)

Specificity

Source Order

Let’s unpack each one carefully 👇

🥇 1. Importance (Origin & !important)

CSS can come from several origins:

Origin	Description	Example
User Agent Styles	Default styles provided by the browser.	Headings are bold by default.
User Styles	Styles a user might set in their browser preferences (rare).	A user setting large text for accessibility.
Author Styles	Styles written by you, the web developer.	Your CSS files, inline or embedded.

Then there’s !important, which can override almost anything.

🔹 Priority Order:

User !important rules

Author !important rules

Author normal rules

User normal rules

Browser default (user-agent) rules

✅ Example:

p {
  color: blue !important;
}

p {
  color: red;
}


The paragraph will be blue, because !important gives it higher priority.

🥈 2. Specificity

Specificity tells the browser how specific a selector is.
The more specific a rule, the more power it has.

Specificity is often represented like this:

Inline styles > IDs > Classes / Attributes / Pseudo-classes > Elements / Pseudo-elements

💡 Specificity Score System

Each selector gets a 4-part score:
(a, b, c, d)

Selector Type	Example	Score
Inline style	<div style="color: red;">	(1, 0, 0, 0)
ID selector	#main	(0, 1, 0, 0)
Class, attribute, or pseudo-class	.btn, [type="text"], :hover	(0, 0, 1, 0)
Element or pseudo-element	div, p::after	(0, 0, 0, 1)

When two rules target the same element, the one with the higher specificity score wins.

✅ Example:

p {
  color: blue;
}

.article p {
  color: green;
}

#content p {
  color: red;
}
#content p {
  color: green;
}


Result → Paragraph text is red, because #content p has the highest specificity.

🥉 3. Source Order (Last Rule Wins)

If two rules have the same importance and specificity,
the last one in the code wins.

✅ Example:

p {
  color: green;
}

p {
  color: orange;
}


Result → Paragraph text is orange, because it appears later in the stylesheet.

🧾 Example Combining All Rules

Let’s see how the cascade works when all three factors mix:

<p id="intro" class="highlight" style="color: purple;">Hello CSS!</p>

p {
  color: red;
}

.highlight {
  color: blue;
}

#intro {
  color: green;
}

p {
  color: yellow !important;
}


🧮 Cascade Evaluation:

p { color: yellow !important; } → !important gives it highest priority

Inline style (style="color: purple;") would normally win, but !important overrides inline

So, the final color is yellow ✅

🧬 The Inheritance Factor

Not all CSS properties are directly affected by cascade rules alone — some inherit values from their parent elements.

For example, color and font-family inherit by default.

Others, like margin or border, do not.

You can control inheritance using:

inherit   /* explicitly inherit from parent */
initial   /* revert to the default (browser) value */
unset     /* inherit if normally inherited, otherwise initial */
revert    /* revert to user or browser stylesheet 

📊 Summary Table
Priority	Factor	Description
1	!important	Overrides all normal rules
2	Specificity	More specific selectors win
3	Source Order	Later rules override earlier ones
—	Inheritance	Some properties inherit automatically
💼 Real-World Use Cases
Scenario	Explanation
Fixing unexpected styles	Check cascade order and specificity to debug which rule wins.
Overriding third-party CSS	Use !important or more specific selectors to ensure your rules apply.
Theming	Manage style overrides gracefully by controlling cascade layers.
Avoiding conflicts	Understanding the cascade helps you structure your CSS to avoid unexpected overrides. */

/* What Are CSS Properties?

In CSS, properties define what aspect of an element you want to style — such as its color, font, size, border, margin, or animation.

A CSS rule looks like this:

selector {
  property: value;
}


Example:

p {
  color: blue;
  font-size: 16px;
}


color and font-size are properties.

blue and 16px are their values.

🗂️ Main Categories of CSS Properties

We can organize CSS properties into logical groups:

Text & Font Properties

Color & Background Properties

Box Model Properties

Positioning & Layout Properties

Flexbox Properties

Grid Properties

Border & Outline Properties

List Properties

Table Properties

Transform & Transition Properties

Animation Properties

Filter, Blend & Effects Properties

Generated Content & Pseudo-elements

Variables, Inheritance & Custom Properties

Miscellaneous / UI Control Properties

Let’s go through each in detail 👇

1. 📝 Text and Font Properties

These control how text looks and behaves.

🔹 Font Properties
Property	Description	Example
font-family	Type of font used	font-family: 'Poppins', sans-serif;
font-size	Size of text	font-size: 18px;
font-style	Italic or normal	font-style: italic;
font-weight	Boldness (100–900 or keywords)	font-weight: bold;
font-variant	Small caps	font-variant: small-caps;
line-height	Space between lines	line-height: 1.6;

🔹 Text Formatting
Property	Description	Example
color	Text color	color: #333;
text-align	Align text	text-align: center;
text-decoration	Underline, overline, etc.	text-decoration: underline;
text-transform	Uppercase, lowercase, capitalize	text-transform: uppercase;
letter-spacing	Space between letters	letter-spacing: 2px;
word-spacing	Space between words	word-spacing: 5px;
text-indent	Indent first line	text-indent: 30px;
text-shadow	Shadow effect	text-shadow: 2px 2px 5px gray;
white-space	Handling spaces/wrapping	white-space: nowrap;
direction	Text direction	direction: rtl;

2. 🎨 Color and Background Properties
Property	Description	Example
background-color	Element background color	background-color: lightblue;
background-image	Add image as background	background-image: url('bg.jpg');
background-repeat	Repeat image	background-repeat: no-repeat;
background-position	Image position	background-position: center;
background-size	Image scaling	background-size: cover;
background-clip	Define painting area	background-clip: padding-box;
background-attachment	Fixed or scroll	background-attachment: fixed;
background-blend-mode	Blend colors	background-blend-mode: multiply;
opacity	Transparency (0–1)	opacity: 0.7;
3. 📦 Box Model Properties

The box model defines how every element is sized and spaced.

Layer	Property	Description	Example
Content	width, height	Size of content	width: 200px;
Padding	padding, padding-top etc.	Space inside border	padding: 10px;
Border	border, border-radius	Line around element	border: 2px solid black;
Margin	margin, margin-top etc.	Space outside border	margin: 20px;
Box Sizing	box-sizing	Include padding/border in size	box-sizing: border-box;
4. 📍 Positioning & Layout Properties
Property	Description	Example
position	static, relative, absolute, fixed, sticky	position: absolute;
top, right, bottom, left	Offset from container	top: 10px;
z-index	Stacking order	z-index: 100;
float	Float element left/right	float: left;
clear	Prevent floating overlap	clear: both;
display	Block, inline, flex, grid, etc.	display: flex;
overflow	Handle overflow content	overflow: hidden;
clip-path	Clip shape area	clip-path: circle(50%);
5. 🧱 Flexbox Properties
Property	Description	Example
display	Enable flexbox	display: flex;
flex-direction	Row or column layout	flex-direction: row;
justify-content	Main axis alignment	justify-content: space-between;
align-items	Cross-axis alignment	align-items: center;
flex-wrap	Wrap items or not	flex-wrap: wrap;
align-content	Multi-line alignment	align-content: center;
flex	Grow/Shrink/Basis shorthand	flex: 1;
order	Reorder flex items	order: 2;
6. 🧩 Grid Properties
Property	Description	Example
display	Enable grid layout	display: grid;
grid-template-columns	Column structure	grid-template-columns: 1fr 1fr;
grid-template-rows	Row structure	grid-template-rows: auto 100px;
gap	Space between grid cells	gap: 10px;
justify-items	Align items horizontally	justify-items: center;
align-items	Align items vertically	align-items: start;
grid-area	Assign named grid area	grid-area: header;
grid-template-areas	Layout map	See below example

Example:

grid-template-areas:
  "header header"
  "sidebar main"
  "footer footer";

7. 🖌️ Border and Outline Properties
Property	Description	Example
border	All-in-one border	border: 2px solid black;
border-width, border-color, border-style	Individual controls	border-style: dashed;
border-radius	Rounded corners	border-radius: 10px;
outline	Outside border (non-layout)	outline: 1px solid red;
box-shadow	Drop shadow	box-shadow: 2px 2px 8px gray;
8. 📋 List Properties
Property	Description	Example
list-style-type	Bullet type	list-style-type: square;
list-style-image	Custom bullet image	list-style-image: url('icon.png');
list-style-position	Inside or outside marker	list-style-position: inside;
9. 📊 Table Properties
Property	Description	Example
border-collapse	Merge table borders	border-collapse: collapse;
border-spacing	Space between cells	border-spacing: 10px;
caption-side	Caption position	caption-side: bottom;
empty-cells	Show/hide empty cells	empty-cells: hide;
10. ⚙️ Transform & Transition Properties
Property	Description	Example
transform	Move, rotate, scale	transform: rotate(45deg);
transform-origin	Transformation point	transform-origin: center;
transition	Smooth change	transition: all 0.3s ease;
transition-property	Property to animate	transition-property: color;
transition-duration	Duration	transition-duration: 0.5s;
11. 🎞️ Animation Properties
Property	Description	Example
@keyframes	Define animation	@keyframes move { from {left: 0;} to {left: 100px;} }
animation-name	Name of keyframes	animation-name: move;
animation-duration	Time	animation-duration: 2s;
animation-iteration-count	Repeat times	animation-iteration-count: infinite;
animation-delay	Start delay	animation-delay: 1s;
animation-direction	Normal, reverse, alternate	animation-direction: alternate;
12. 🧪 Filter, Blend & Visual Effects
Property	Description	Example
filter	Apply visual filters	filter: blur(5px);
mix-blend-mode	Blend element colors	mix-blend-mode: multiply;
backdrop-filter	Blur behind element	backdrop-filter: blur(10px);
13. ✨ Generated Content & Pseudo-elements
Selector / Property	Description	Example
::before, ::after	Add content before/after element	p::after { content: "✓"; }
content	Defines generated content	content: "Read more";
14. ⚙️ Variables, Inheritance & Custom Properties
Property	Description	Example
--var-name	Define a variable	--main-color: blue;
var()	Use variable	color: var(--main-color);
inherit, initial, unset, revert	Control inheritance	color: inherit;
15. 🧍 Miscellaneous / UI Properties
Property	Description	Example
cursor	Pointer style	cursor: pointer;
resize	Allow resize	resize: both;
user-select	Allow text selection	user-select: none;
visibility	Hide but keep space	visibility: hidden;
display	Hide or show	display: none;
pointer-events	Enable/disable click	pointer-events: none;
🧩 Summary
Category	Example Properties
Text & Font	color, font-size, text-align
Background	background-color, background-image
Box Model	margin, padding, border
Layout	display, position, float
Flexbox & Grid	justify-content, grid-template-columns
Animation & Transform	transition, transform, animation
Effects	filter, opacity, box-shadow
Variables	--theme-color, var()
🏁 In Short:

CSS properties are instructions that tell the browser how to render HTML elements — controlling layout, typography, colors, spacing, and animation to create visually appealing and responsive designs. */